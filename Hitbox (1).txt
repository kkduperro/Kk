local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

local player = Players.LocalPlayer
local hitboxSize = 5
local hitboxTransparency = 0.5
local affectPlayers = true
local affectNPCs = true  -- Asegúrate de tener esto en true para probar los NPCs
local checkTeam = false
local updateInterval = 0.5

-- Cache para instancias modificadas
local modifiedInstances = {
    players = {},
    npcs = {}
}

-- ========================================
--            Código de la UI
-- ========================================
local screenGui = Instance.new("ScreenGui")
screenGui.Parent = game.CoreGui

local function addUICorner(instance, radius)
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, radius)
    corner.Parent = instance
end

local function addUIStroke(instance, thickness, color)
    local stroke = Instance.new("UIStroke")
    stroke.Thickness = thickness
    stroke.Color = color
    stroke.Parent = instance
end

local button = Instance.new("TextButton")
button.Size = UDim2.new(0, 120, 0, 40)
button.Position = UDim2.new(0.8, 0, 0.1, 0)
button.Text = "Abrir Menú"
button.TextColor3 = Color3.new(1, 1, 1)
button.BackgroundColor3 = Color3.new(0.2, 0.2, 0.2)
button.BackgroundTransparency = 0.25
button.Font = Enum.Font.GothamSemibold
button.TextSize = 14
button.Parent = screenGui
addUICorner(button, 8)
addUIStroke(button, 2, Color3.new(1, 1, 1))

local menu = Instance.new("Frame")
menu.Size = UDim2.new(0, 300, 0, 300)
menu.Position = UDim2.new(0.5, -150, 0.5, -150)
menu.BackgroundColor3 = Color3.new(0.1, 0.1, 0.1)
menu.BackgroundTransparency = 0.25
menu.Visible = false
menu.Parent = screenGui
addUICorner(menu, 0)
addUIStroke(menu, 2, Color3.new(1, 1, 1))

local title = Instance.new("TextLabel")
title.Size = UDim2.new(1, 0, 0, 30)
title.Position = UDim2.new(0, 0, 0, 5)
title.Text = "Configuración de Hitbox"
title.TextColor3 = Color3.new(1, 1, 1)
title.BackgroundTransparency = 1
title.Font = Enum.Font.GothamBold
title.TextSize = 16
title.Parent = menu

local function createStyledTextBox(parent, position, defaultText)
    local textBox = Instance.new("TextBox")
    textBox.Size = UDim2.new(0.8, 0, 0, 25)
    textBox.Position = position
    textBox.Text = defaultText
    textBox.TextColor3 = Color3.new(1, 1, 1)
    textBox.BackgroundColor3 = Color3.new(0.2, 0.2, 0.2)
    textBox.BackgroundTransparency = 0.5
    textBox.Font = Enum.Font.Gotham
    textBox.TextSize = 14
    textBox.Parent = parent
    addUICorner(textBox, 4)
    addUIStroke(textBox, 1, Color3.new(1, 1, 1))
    return textBox
end

local function createStyledButton(parent, position, text)
    local btn = Instance.new("TextButton")
    btn.Size = UDim2.new(0.4, -10, 0, 25)
    btn.Position = position
    btn.Text = text
    btn.TextColor3 = Color3.new(1, 1, 1)
    btn.BackgroundColor3 = Color3.new(0.2, 0.2, 0.2)
    btn.BackgroundTransparency = 0.5
    btn.Font = Enum.Font.GothamSemibold
    btn.TextSize = 12
    btn.Parent = parent
    addUICorner(btn, 4)
    addUIStroke(btn, 1, Color3.new(1, 1, 1))
    return btn
end

local hitboxInput = createStyledTextBox(menu, UDim2.new(0.1, 0, 0, 45), tostring(hitboxSize))
local transparencySlider = createStyledTextBox(menu, UDim2.new(0.1, 0, 0, 85), tostring(hitboxTransparency))
local playersOnly = createStyledButton(menu, UDim2.new(0.05, 0, 0, 125), "Solo Jugadores")
local npcsOnly = createStyledButton(menu, UDim2.new(0.55, 0, 0, 125), "Solo NPCs")
local bothButton = createStyledButton(menu, UDim2.new(0.3, 0, 0, 165), "Ambos")
local checkTeamButton = createStyledButton(menu, UDim2.new(0.3, 0, 0, 205), "Revisar Equipo: OFF")

local function makeDraggable(obj)
    local dragging, dragInput, dragStart, startPos
    obj.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = obj.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    obj.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            dragInput = input
        end
    end)
    UserInputService.InputChanged:Connect(function(input)
        if input == dragInput and dragging then
            local delta = input.Position - dragStart
            obj.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)
end

makeDraggable(button)
makeDraggable(menu)

-- ========================================
--       Funciones para el Hitbox
-- ========================================

-- Función para obtener la parte "raíz" de un modelo
local function getRootPart(model)
    -- Primero busca "HumanoidRootPart"
    local root = model:FindFirstChild("HumanoidRootPart")
    if root and root:IsA("BasePart") then
        return root
    end
    -- Luego intenta con PrimaryPart
    if model.PrimaryPart and model.PrimaryPart:IsA("BasePart") then
        return model.PrimaryPart
    end
    -- Fallback: recorre el modelo en busca de un BasePart
    for _, child in ipairs(model:GetDescendants()) do
        if child:IsA("BasePart") then
            return child
        end
    end
    return nil
end

local function restoreNormalHitbox(model)
    -- Para jugadores o NPCs, ignoramos el personaje del jugador local
    if model == player.Character then return end
    local rootPart = getRootPart(model)
    if rootPart then
        local normalSize = Vector3.new(2, 2, 1)
        if rootPart.Size ~= normalSize then
            rootPart.Size = normalSize
        end
        if rootPart.Transparency ~= 1 then
            rootPart.Transparency = 1
        end
        rootPart.CanCollide = false
        modifiedInstances.players[model] = nil
        modifiedInstances.npcs[model] = nil
    end
end

local function updateHitbox(model, size, transparency, isNPC)
    if model == player.Character then return end
    local rootPart = getRootPart(model)
    if rootPart then
        if size == 0 then
            restoreNormalHitbox(model)
        else
            local desiredSize = Vector3.new(size, size, size)
            if rootPart.Size ~= desiredSize then
                rootPart.Size = desiredSize
            end
            if rootPart.Transparency ~= transparency then
                rootPart.Transparency = transparency
            end
            if rootPart.CanCollide ~= false then
                rootPart.CanCollide = false
            end
            if isNPC then
                modifiedInstances.npcs[model] = true
            else
                modifiedInstances.players[model] = true
            end
        end
    end
end

local function restoreAllPlayers()
    for _, plr in ipairs(Players:GetPlayers()) do
        if plr.Character then
            restoreNormalHitbox(plr.Character)
        end
    end
    modifiedInstances.players = {}
end

local function restoreAllNPCs()
    -- Se recorre la cache de NPCs modificados
    for model, _ in pairs(modifiedInstances.npcs) do
        if model then
            restoreNormalHitbox(model)
        end
    end
    modifiedInstances.npcs = {}
end

local function shouldAffectPlayer(plr)
    if not affectPlayers then return false end
    if plr == player then return false end
    if checkTeam then
        local playerTeam = player.Team
        local targetTeam = plr.Team
        if not playerTeam or not targetTeam then return false end
        return playerTeam ~= targetTeam
    end
    return true
end

-- Esta función ahora recorre todos los descendants de workspace para detectar NPCs,
-- de modo que si están dentro de carpetas también sean encontrados.
local function applyHitboxToAll()
    -- Actualizar jugadores
    if affectPlayers then
        for _, plr in ipairs(Players:GetPlayers()) do
            if plr.Character then
                if shouldAffectPlayer(plr) then
                    updateHitbox(plr.Character, hitboxSize, hitboxTransparency, false)
                else
                    restoreNormalHitbox(plr.Character)
                end
            end
        end
    else
        restoreAllPlayers()
    end

    -- Actualizar NPCs (se recorre workspace en busca de modelos con Humanoid)
    if affectNPCs then
        for _, obj in ipairs(workspace:GetDescendants()) do
            if obj:IsA("Model") and obj:FindFirstChild("Humanoid") and not Players:GetPlayerFromCharacter(obj) then
                updateHitbox(obj, hitboxSize, hitboxTransparency, true)
            end
        end
    else
        restoreAllNPCs()
    end
end

-- ========================================
--          Conexiones de la UI
-- ========================================

button.MouseButton1Click:Connect(function()
    menu.Visible = not menu.Visible
end)

hitboxInput.FocusLost:Connect(function(enterPressed)
    if enterPressed then
        local newSize = tonumber(hitboxInput.Text)
        if newSize and newSize >= 0 and newSize <= 50 then
            hitboxSize = newSize
            applyHitboxToAll()
        else
            hitboxInput.Text = tostring(hitboxSize)
        end
    end
end)

transparencySlider.FocusLost:Connect(function(enterPressed)
    if enterPressed then
        local newTransparency = tonumber(transparencySlider.Text)
        if newTransparency and newTransparency >= 0 and newTransparency <= 1 then
            hitboxTransparency = newTransparency
            applyHitboxToAll()
        else
            transparencySlider.Text = tostring(hitboxTransparency)
        end
    end
end)

local function updateButtonVisibility()
    playersOnly.Visible = true
    npcsOnly.Visible = true
    bothButton.BackgroundColor3 = (affectPlayers and affectNPCs) and Color3.new(0, 0.5, 0) or Color3.new(0.2, 0.2, 0.2)
    playersOnly.BackgroundColor3 = (affectPlayers and not affectNPCs) and Color3.new(0, 0.5, 0) or Color3.new(0.2, 0.2, 0.2)
    npcsOnly.BackgroundColor3 = (not affectPlayers and affectNPCs) and Color3.new(0, 0.5, 0) or Color3.new(0.2, 0.2, 0.2)
    checkTeamButton.Visible = affectPlayers
end

playersOnly.MouseButton1Click:Connect(function()
    affectPlayers = true
    affectNPCs = false
    updateButtonVisibility()
    restoreAllNPCs()
    applyHitboxToAll()
end)

npcsOnly.MouseButton1Click:Connect(function()
    affectPlayers = false
    affectNPCs = true
    updateButtonVisibility()
    restoreAllPlayers()
    applyHitboxToAll()
end)

bothButton.MouseButton1Click:Connect(function()
    if affectPlayers and affectNPCs then
        affectPlayers = false
        affectNPCs = false
        restoreAllPlayers()
        restoreAllNPCs()
    else
        affectPlayers = true
        affectNPCs = true
    end
    updateButtonVisibility()
    applyHitboxToAll()
end)

checkTeamButton.MouseButton1Click:Connect(function()
    checkTeam = not checkTeam
    checkTeamButton.Text = "Revisar Equipo: " .. (checkTeam and "ON" or "OFF")
    checkTeamButton.BackgroundColor3 = checkTeam and Color3.new(0, 0.5, 0) or Color3.new(0.2, 0.2, 0.2)
    applyHitboxToAll()
end)

Players.PlayerAdded:Connect(function(plr)
    plr.CharacterAdded:Connect(function(character)
        if shouldAffectPlayer(plr) then
            updateHitbox(character, hitboxSize, hitboxTransparency, false)
        end
    end)
end)

-- También se conecta para cuando se añada un nuevo modelo al workspace
workspace.ChildAdded:Connect(function(child)
    -- Si es un modelo y tiene un Humanoid y no pertenece a un jugador, se considera NPC
    if child:IsA("Model") and child:FindFirstChild("Humanoid") and not Players:GetPlayerFromCharacter(child) then
        updateHitbox(child, hitboxSize, hitboxTransparency, true)
    end
end)

-- ========================================
--             Loop de Actualización
-- ========================================
spawn(function()
    while true do
        wait(updateInterval)
        applyHitboxToAll()
    end
end)

updateButtonVisibility()
